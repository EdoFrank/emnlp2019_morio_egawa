op_id: 51
op_title: 私は、Microsoft Visual Studio 1998 が現在のオープンソース開発環境よりずっと先進的だったと思います。

いわゆるオープンソース開発環境は「Linux」と呼ばれています。

そこには、

 - gcc: C, C++, Objective-C, Fortran, Java, Ada, そしてGoのための最も良い最適化コンパイラのひとつ
 - その他: Perl, Python, Haskell, OCaml, Erlang, その他諸々のための業界標準のインタプリタ
 - vim, emacs: 非常に強力で、シンタックスハイライトがあり、マクロドリブンで、カスタマイズできるテキストエディタであり、何万ものモジュール、プラグインそしてガイドがあり、コードタグや呼び出しツリー、正規表現をサポートしており、・・・
 - gdb: 解析を手厚くサポートした強力なデバッガ
 - grpof: 結果を解析するためのいくつものユーティリティをもつ、包括的で一般的なプロファイラ
 - valgrind: メモリの問題、レースコンディション、スタックの破壊などなどを分類するツールをもつ、先駆的なメモリ解析フレームワーク
 - make: ユーザコマンド、変数、条件、パターン置換、などなどに対し、完全にオープンなサポートを提供する、スクリプタブルなビルドシステム
 - autotools: makeの入力を自動的に生成し、対象のシステムに合わせて調整するユーティリティ
 - grep: テキストファイルのディレクトリを検索し、行番号と文脈付きの結果を得られる
 - svn, git, mercurial, etc.: 適切なバージョン管理のサポート

これらはあくまでもコマンドラインにあるもので、ほとんどは何もインストールしなくても使えます。そしてこれらは全くお金を払わなくても使えるのです。

私は何年間かvimを使ってきました（達人の標準からすればたいして長くはありません）が、IDE式の、より典型的なエディタを使う場合に比べ、3-4倍も生産性が上がります。ctagsやそれに似たツールを使えば、私はあらゆる変数、関数、クラスの定義へジャンプし、呼び出しツリーやオブジェクトブラウザを見たり、コードの邪魔な部分を切ったりすることができます。

もしあなたが（最新のものも含む）Visual Studioの比較的機能の悪いエディタだけを使ってきたのなら、強力なエディタがいかにパワフルなのか、まるで想像もつかないのでしょう。もちろん、使い始めはコツを掴む必要がありますが、今後の生活において毎日行うものであるなら、それは無駄な努力ではないでしょう。

他のタスクについては、標準の(GNU) Linuxコマンドラインは、おもにpipingパラダイム、シェルの標準であるバラエティに富んだテキスト処理ツールおよびPerlスクリプトなどの簡単さや統合のおかげで、20年間の中で進化し、世界一のテキスト処理ツールのひとつになりました。

私は大きなCシステムのコードベースを管理しており、Linuxが提供するツールがなければ、これはずっとずっと大変だったでしょう（MSとLinux双方の環境での多くの開発経験があってこそ言えることです）。Linuxがなければ我々は何年も遅れていたことでしょう。
