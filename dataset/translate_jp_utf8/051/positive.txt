op_id: 51
op_title: 私は、Microsoft Visual Studio 1998 が現在のオープンソース開発環境よりずっと先進的だったと思います。

あなたの主張の最大の問題は、あなたが、長年使う中で知識と経験を培ってきたものと、短期間しか使ったことのない「反対の立場」を比較しようとしていることです。もし私がvim/tmux/rake/ruby/rails/コマンドラインからVSに移行したら、私も間違いなく使いにくいとすぐに感じてしまうでしょう。というのは実際、iOSの作業をXCodeで行い、Androidの作業をEclipseで行った時、私はとても不便に思いました。だから、あなたは、単に機能的な環境を比較しているのではなく、使い古し、履き慣れた靴と、別のメーカーの新しい靴を比較しているということを覚えておいてください。つまり、なんでも最初からしっくりくるものではないのです。

それを踏まえて、私がアプリを開発する際、ほとんどの場合デバッガを使わないし、必要としていません。デバッガが無いということではなくて、そこまで使う頻度が多くないということです。これは（この言葉を使うことを許してくれるのなら）パラダイムシフトなのです。私はテストを書き、テストが通るようにします。デバッガが必要なのは、他人のコードを接続し、何が起こっているのかを探らなければならない時くらいですね。それでもgdb、pry、そしてRubyのデバッガを使うことができます。

それから、私は単にテキストエディタのみを使っているわけではありません。確かに私は、vimを自分のエディタとして使っていますが、これもただ単にテキストエディタだけであるのではありません（かなり良いエディタですが）。テストもここから実行するし、シンタックスハイライトやコード整形も提供されるし（gg=Gでファイル全体をインデントして整形できるのは便利です）、自動補完もありますし、メソッドや変数の定義にジャンプすることもできます。ワークスペース管理もできます。自動化もできます。

私はtmuxも使っていて、これは（機能はこれだけではありませんが、一例として）コンソールをvimと同じ端末に置いてくれますし、それに加えて \t と入力するとディスパッチでき、vimがテスト実行用の分割ウィンドウで開かれます。結果はいい感じで、使いやすいフォーマットに分析されるので、エラーが起こったファイルや行に自動でジャンプすることができます。端末を抜ける必要があるときは、抜けた時と同じ状態に再びに戻ることができます。

私は完全に、インターネットをアクセスできる人なら誰とでも問題なくペアプログラミングをすることができます。相手はSSHクライアント以外、何もシステムにインストールしていなくてもいいのです。

あなたが「20年前に戻ってるみたい」とおっしゃったのは、あなたが端末自体を古いと思っているからでしょうか、私はそう考える以外、あなたの主張を正当化できません。個人的に、私はIDEが分かりにくい、機能の遅い不良品だと思っているので、我々はお互い偏見を持っているのでしょうね。:)